#!/usr/bin/env node

/**
 * Module dependencies. 
 */

var app       = require('../app');
var debug     = require('debug')('NodeESM:server');
var http      = require('http');
var config    = require('../config');
var sfdc      = require('../services/sfdc');
var async     = require('../services/async');
var messages  = require('../message');
var db        = require('../models');
var modelSync = require('../models/sync');
var language  = require('../language');
var mailtransporter  = require('../mailer');
var staticcomponentconfig  = require('../component');
require('../locale');
require('../timzone');
require('../salesforceconfig');
require('../sobjectfieldlistconfig');
require('../ssoconfig');
var hook      = require('../hook');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
db.sequelize.sync().then(function(){
  modelSync.start(db, function(err){
    sfdc.getConnection(function(err, jsForceConnection){
      server.listen(port);
      sfdc.subscribeUserSyncTopic(null,null);
      console.log('Server is listening on port - ' + port);
    });
  	hook();

    // sfdc.login().then(function(){
    //   server.listen(port);
    //   console.log('Server is listning on port - ' + port);
    //   server.on('error', onError);
    //   server.on('listening', onListening);
    // });
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}